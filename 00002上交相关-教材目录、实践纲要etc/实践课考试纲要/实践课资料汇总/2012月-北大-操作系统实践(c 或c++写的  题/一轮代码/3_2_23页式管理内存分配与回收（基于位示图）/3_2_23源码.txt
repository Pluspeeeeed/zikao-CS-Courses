/*
  3_2_23 模拟页式存储管理方案中页面分配和回收(基于位示图）
*/

#include <stdio.h>
#include <string.h>

#define maxNum 50
#define maxStr 100
#define pageLength 4 

void writeFile(int row,int col);     //用于生成位示图的测试数据
void readFile(int arr[][maxNum],int col);

void NCFP(int arr[][maxNum],int row,int col);
void NCHS(int arr[][maxNum],int row,int col);

void outArr(int arr[][maxNum],int row,int col);
void  new_line();


void main()
{
	int row,col,sel;
	int arr[maxNum][maxNum];
    
	printf("\n模拟页式存储管理方案中页面分配和回收(基于位示图）\n");
    //initial
     row=256/32; 
	 col=32;  
    
	 printf("\n请选择包含位示图的文件：按 1 你直接输入包含位示图的文件名，按2 输入一个空的文件名，由程序函数生成位示图\n");
	 scanf("%d",&sel);
	 if(sel==1)
	 {
	    readFile(arr,col);
	 }
	 else
	 {
	     //create data
		 writeFile(row,col);
		 //readFile
		 readFile(arr,col);   //col用于计算arr数组的行列下标
	 }


	//fenPei
     NCFP(arr,row,col);

	//huiShou
	NCHS(arr,row,col);
}


void writeFile(int row,int col)
{
	FILE *stream;
	char fileName[maxStr];
    int i,j;
    //
    printf("\n自己写了一个生成位示图的函数 二维数组的1,2列默认为0；剩下的全为1\n");
    printf("\n请输入一个空的文本文件名,以便生成位示图测试数据\n");

	new_line();
	gets(fileName);
    stream=fopen(fileName,"w");
	while(stream==NULL)
	{
	    printf("\n文件名输入有误，请您重新输入一个空的文本文件名\n"); 
		gets(fileName);
        stream=fopen(fileName,"w");
	}
	//
    for(i=0;i<row;i++)
	{
	   for(j=0;j<col;j++)
	   {
	       if(j==1 || j==2)
		   {
		       fprintf(stream,"%d ",0);  
		   }
		   else
		   {
		       fprintf(stream,"%d ",1);
		   }
	   }
	   fprintf(stream,"\n");
	}

	//
	fclose(stream);
}

void readFile(int arr[][maxNum],int col)
{
   	FILE *stream;
	char fileName[maxStr];
    int i,j,k=0,data;
    //
    printf("\n请输入包含位示图的文件名\n");
	//new_line();
	gets(fileName);
    stream=fopen(fileName,"r");
	while(stream==NULL)
	{
	    printf("\n文件名输入有误，请您重新输入包含位示图的文件名\n"); 
		gets(fileName);
        stream=fopen(fileName,"r");
	}

	//
    while(!feof(stream))
	{
	   i=k/col;     //按行存储（区别开题中 位示图与物理块的转化，它按列转化）
	   j=k%col;
	   fscanf(stream,"%d",&data);
	   arr[i][j]=data;

	   ++k;
	}
    //
	fclose(stream);
}

void NCFP(int arr[][maxNum],int row,int col)
{
	int proLength,proPage,k,proFlag=0,phyPage;
	int i,j,selFlag;
	
    do
	{
		printf("\n请您输入程序长度（单位为 k)\n");
		scanf("%d",&proLength);
		//计算逻辑页数
		if(proLength%4==0)
		{
		   proPage=proLength/pageLength;
		}
		else
		{
		   proPage=proLength/pageLength+1;
		}   
		printf("\n该程序的逻辑页数为%d\n",proPage);
		printf("\n为其分配的物理块号为：\n");

		//
		k=0;   //逻辑页0
		for(i=0;i<row;i++)
		{
		   for(j=0;j<col;j++)
		   {
			  if(arr[i][j]==0)
			  {
				  arr[i][j]=1;
				  phyPage=i+j*col;
				  printf("%d,",phyPage);

				  ++k;           //为下一个逻辑页分配
				  if(k>=proPage) //当为逻辑页分配完后，应跳出
				  {
					 proFlag=1;
				  }
			  }

			  if(proFlag==1) {break;}
		   }

		   if(proFlag==1) {break;}
        
		}

	   //
		printf("\n继续 输入程序长度吗？按 1 继续；按 0 结束\n");
		scanf("%d",&selFlag);
	}while(selFlag!=0);
}

void NCHS(int arr[][maxNum],int row,int col)
{
    int phyData;
	int i,j,selFlag;
	
    do
	{
		//
		printf("\n请您输入回收的物理页面号\n");
		scanf("%d",&phyData);

		//computer
		i=phyData%col;  //行
		j=phyData/col; 
		if(i>=row || j>=col)
		{
	  		printf("\n您输入的 回收的物理页面号不正确 \n");
		}
		else
		{
		   arr[i][j]=0;
		   printf("\n该回收的物理页面号在位示图中的位置为:(%d,%d)\n",i,j);
		   outArr(arr,row,col);
		}
    
		printf("\n继续 输入回收的物理页面号？按 1 继续；按 -1 结束\n");
		scanf("%d",&selFlag);
	}while(selFlag!=-1);

}

void outArr(int arr[][maxNum],int row,int col)
{
    int i,j;
	printf("\n-----位示图为( %d行%d列 )(表示该页已被分配，0表示该页是空闲的---------\n",row,col);
    for(i=0;i<row;i++)
	{
	   for(j=0;j<col;j++)
	   {
		  printf("%d\t",arr[i][j]);
	   }
	   printf("\n");    
	}
}

void  new_line()
{
   char ch;   
   do
   {
      ch=getchar();
   }while(ch!='\n');
}