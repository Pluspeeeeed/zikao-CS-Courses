/*
注：

3_1_2可变分区存储管理方案中的内存回收
用户提出内存空间的申请；系统根据申请者的要求，按照一定的分配策略分析内存空间的使用情况，找出能满足请求的空闲区，分给申请者；当程序执行完毕或主动归还内存资源时，系统要收回它所占用的内存空间或它归还的部分内存空间。
1．程序运行时首先接收输入：空闲区数据文件，包括若干行，每行有两个数据项：起始地址、长度（均为整数），各数据项以逗号隔开。
2．建立空闲区表并在屏幕上显示输出空闲区表内容，空闲区表中记录了内存中可供分配的空闲区的始址和长度，用标志位指出该分区是否是未分配的空闲区。
3．从用户界面根据用户提示接收一个内存回收申请，格式为：起始地址、长度（均为整数）。（用空格隔开）
4．按照可变分区内存回收算法修改空闲区表，要考虑四种可能性：
归还区有下邻空闲区；归还区有上邻空闲区；归还区既有上邻空闲区又有下邻空闲区；归还区既无上邻又无下邻空闲区。
5．重复3、4，直到输入为特殊字符（0）。
6．在屏幕上显示输出新的空闲区表。
7．测试说明：测试教师将事先准备好一个文件，启动程序运行后，程序首先提示输入文件名，测试教师输入文件名，屏幕上首先显示空闲区表的内容，然后，测试教师输入其他数据，并查看程序输出结果。

*/

#include <stdio.h>
#include <string.h>


#define maxNum 20 
typedef struct kxqNode
{
   int startAddress;
   int kxqLength;
   int flag;   //0：代表空闲 1：代表占用；默认为0
}kxqTable;

int readFile(kxqTable arr[maxNum]); 
void sortKxq(kxqTable arr[maxNum],int num);
int NCHS(kxqTable arr[maxNum],int num,int sAdress,int sLength);   //可变分区内存回收算法
void outKxq(kxqTable arr[maxNum],int num);

void main()
{
   kxqTable kxqTArr[maxNum];
   int arrNum,sAdress,sLength;  
   printf("\n3_1_2可变分区 内存回收\n");
   //
   arrNum=readFile(kxqTArr);
   //
   printf("\n请您输入一个内存回收申请，格式为：起始地址、长度（均为整数),（用空格隔开）;输入0 0 结束\n");
   scanf("%d %d",&sAdress,&sLength);
   while(sAdress!=0 || sLength!=0)
   {
      arrNum=NCHS(kxqTArr,arrNum,sAdress,sLength);  //处理后，数组大小可能变化
	  scanf("%d %d",&sAdress,&sLength);
   }

  //输出新空闲区
   outKxq(kxqTArr,arrNum);
}


int readFile(kxqTable arr[maxNum])
{
    int i=0,kxqNum;
    char fName[50];
	FILE *stream;
	printf("\n请输入空闲区数据文件名\n");
	gets(fName);
	stream=fopen(fName,"r");    //打开文件
	while(stream==NULL)
	{
	   printf("\n文件名或路径错误，请重新输入文件名\n");
	   gets(fName);
       stream=fopen(fName,"r");
	}
	//读文件
    while(!feof(stream))
	{
	   fscanf(stream,"%d %d",&arr[i].startAddress,&arr[i].kxqLength);
	   arr[i].flag=0;   //默认为空闲
	   ++i;
	}
    kxqNum=i;   

	//关闭
    fclose(stream);
	return kxqNum;
}

void sortKxq(kxqTable arr[maxNum],int num)
{
    int i,j;
    kxqTable  temp;
	for(i=0;i<num;i++)
	{
	    for(j=i+1;j<num;j++)
		{
		    if(arr[j].startAddress<arr[i].startAddress)
			{
			    temp=arr[i];
				arr[i]=arr[j];
				arr[j]=temp;
			}
		}
	}
}

int NCHS(kxqTable arr[maxNum],int num,int sAdress,int sLength)   //可变分区内存回收算法
{
    int frontFlag=0;  //0代表归还区前 无紧临空闲区； 1代表有   
	int backFlag=0;   //0代表归还区后 无紧临空闲区； 1代表有
	int i,j,pos,posK;
  
	//----(一 对空闲区排序
    sortKxq(arr,num);

	//-----（二 查看归还区的前后 有无空闲区
    for(i=0;i<num;i++)
	{
	   if(arr[i].startAddress>sAdress)   //找到 比用户地址大的第一个空闲区，跳出
	   {	       
		   break;
	   }
	}
     pos=i;   //包括跳出时，记录i;和没找到满足条件的i
     //
	 posK=pos-1;   
	 if(posK<0)        //考虑到数组下标不能小于0
	 {
	    frontFlag=0;
	 }
	 else
	 {
	    if( arr[posK].flag==0 && arr[posK].startAddress+arr[posK].kxqLength==sAdress )
		{
		    frontFlag=1;
		}
		else
		{
		    frontFlag=0;
		}
	 }
	 //
	 if(pos>=num)
	 {
	    backFlag=0;
	 }
	 else
	 {
	    if(arr[pos].flag==0 && sAdress+sLength==arr[pos].startAddress )
		{
		   backFlag=1;
		}
	    else
		{
		   backFlag=0;
		}
	 }

	//-----(三  分类回收内存 (注意修改的位置）
    if(frontFlag==0 && backFlag==1)         //归还区有下邻空闲区
	{
	   arr[pos].startAddress=sAdress;
	   arr[pos].kxqLength=arr[pos].kxqLength+sLength;

	}
	else if(frontFlag==1 && backFlag==0)      //归还区有上邻空闲区
	{
	   arr[posK].kxqLength=arr[posK].kxqLength+sLength;
	}
    else if(frontFlag==1 && backFlag==1)      //归还区既有上邻空闲区又有下邻空闲区
	{
	   //注意
	   arr[posK].kxqLength=arr[posK].kxqLength+arr[pos].kxqLength+sLength;

	   for(j=pos+1;j<num;j++)  //把pos处的记录覆盖掉，即删除
	   {
	       arr[j-1]=arr[j]; 
	   }
	   --num;      //
	}

	else if(frontFlag==0 && backFlag==0)     //归还区既无上邻又无下邻空闲区
	{
	   for(j=num-1;j>=pos;j--)   //插入元素
	   {
	      arr[j+1]=arr[j];
	   }

	   arr[pos].startAddress=sAdress;
	   arr[pos].kxqLength=sLength;
	   arr[pos].flag=0;
	   ++num;   //
	} 

   return num;
}

void outKxq(kxqTable arr[maxNum],int num)
{
	int i;
    printf("\n新的空闲区表\n");
	printf("起始地址    长度  空闲标志为");
	for(i=0;i<num;i++)
	{
	   printf("\n%d   %d   %d\n",arr[i].startAddress,arr[i].kxqLength,arr[i].flag);
	}
}

