 	  北大操作系统班519上午上机练习答案
刚刚调通了第一题。内存可分配区表和已分配表采用了数组存储（链表不熟，正在看书^_^），初始化那部分没有使用文件，采用了手工赋值的方法（主要因为文件操作不太熟，正在看书）。我把我写的程序贴出来跟大家探讨一下，望大家多多指教！ 
――――――――――――――――――――――――――――
可变分区存储管理方案中的内存分配 

用户提出内存空间的申请；系统根据申请者的要求，按照一定的分配策略分析内存空间的使用情况，找出能满足请求的空闲区，分给申请者；当程序执行完毕或主动归还内存资源时，系统要收回它所占用的内存空间或它归还的部分内存空间。 


1．程序运行时首先接收输入：空闲区数据文件，包括若干行，每行有两个数据项：起始地址、长度（均为整数），各数据项以逗号隔开。 

2．建立空闲区表并在屏幕上显示输出空闲区表内容，空闲区表中记录了内存中可供分配的空闲区的始址和长度，用标志位指出该分区是否是未分配的空闲区。 


3．从用户界面根据用户提示接收一个内存申请，格式为：作业名、申请空间的大小。 

4．按照最差（最坏）适配算法选择一个空闲区，分割并分配，修改相应的数据结构（空闲区表），填写内存已分配区表（起始地址、长度、标志位），其中标志位的一个作用是指出该区域分配给哪个作业。 


5．重复3、4，直到输入为特殊字符（0）。 

6．在屏幕上显示输出新的空闲区表和已分配区表的内容。 

#include <stdio.h>
#include <string.h>
#include "memory1.h"


struct MemBlock
{
int begin;
int size;
int flag;
char name[20];
};

struct MemBlock FreeTab[50];

struct MemBlock UsedTab[50];

//**************************init()***********************

void init()
{
int j;

for(j=0;j<50;j++)
{
  FreeTab[j].flag=-1;
  UsedTab[j].flag=-1;
}

printf("**********************\n");
printf("内存分配测试程序初始化\n");
printf("**********************\n\n\n");
//printf("请输入内存空闲区的起始地址和长度(中间用空格隔开):\n");

//for(j=0;j<4;j++)
//{
  FreeTab[0].begin=500;
  FreeTab[0].size=2000;
  FreeTab[0].flag=0;
/*
  FreeTab[1].begin=1000;
  FreeTab[1].size=3000;
  FreeTab[1].flag=0;
 FreeTab[2].begin=5000;
  FreeTab[2].size=200;
  FreeTab[2].flag=0;
 //printf("FreeTab[%d]:%d  ",j,FreeTab[j].begin);
  //printf("%d \n",FreeTab[j].size);
  /*
  printf("FreeTab[%d]",j);
  scanf("%d %d",&FreeTab[j].begin,&FreeTab[j].size);
  FreeTab[j].flag=0;
  printf("\n");
  */
//}
}
int TabCount(struct MemBlock mem[])
{
int i;
int count=0;
for(i=0;i<50;i++)
{
  if(mem.flag==-1) return(count);
  else count++;
}
}
//***********************sort()**************************
void sort(int i,struct MemBlock mem[])
{   
for(i++;i<50&&mem.flag!=-1;i++)
  mem[i-1]=mem;
}
//**************************assign()***********************
int assign(char *name,int size)
{
int i=0,temp;
int max=0,pp=0;
//判断是否有重名
char *p=FreeTab->name;
int t=stricmp(name,p);
if(!t)
{
  printf("您输入的作业已在内存，请更换作业名!\n");
  return(0);
}
//找到size最大的内存块
for(i=0;i<50;i++)
{
  if(FreeTab.size>pp)
  {
   pp=FreeTab.size;
   max=i;
  }
  //if(FreeTab.size<FreeTab[i+1].size)
  // max=i+1;
}
if(FreeTab[max].size<size)
{
  printf("系统内存无法满足您的要求，请稍候再试!\n");
  return(0);
}
//分配内存，修改FreeTab项目中的begin,size,name
temp=TabCount(UsedTab);
UsedTab[temp].begin=FreeTab[max].begin;
UsedTab[temp].size=size;
strcpy(UsedTab[temp].name,name);
UsedTab[temp].flag=1;
//FreeTab[max].size=size;


FreeTab[max].begin=FreeTab[max].begin+size;
FreeTab[max].size=FreeTab[max].size-size;
FreeTab[max].flag=0;
return(1);
}
void release(struct MemBlock mem[])
{
int count;
count=TabCount(mem);
//FreeTab=FreeTab[count];
    mem[count-1].begin=0;
    mem[count-1].size=0;
mem[count-1].flag=-1;
//strcpy(FreeTab[count].name,NULL);
}
//**************************callback()***********************
void callback(char *name)
{
int i,j,k,temp;
int begin,size;
int t1,t2;
int count;

for(i=0; i<50 && UsedTab.flag!=-1; i++)
{
  if(!stricmp(UsedTab.name,name))
  {
   //temp=i;
   break;
  }
}
begin=UsedTab.begin;
size=UsedTab.size;

for(j=0;j<50&&FreeTab[j].flag!=-1;j++)
{
         if(begin==(FreeTab[j].begin+FreeTab[j].size))
   {
    t1=1;
    break;
   }
   t1=0;
}
for(k=0;k<50&&FreeTab[k].flag!=-1;k++)
{
  if((begin+size)==FreeTab[k].begin)
  {
   t2=1;
   break;
  }
  t2=0;
}
//有上下临区
if(t1 && t2)
{
  FreeTab[j].size=FreeTab[j].size+size+FreeTab[k].size;
  sort(j-1,FreeTab);
  release(FreeTab);
  sort(i,UsedTab);
  release(UsedTab);

}
//有上临区
else
{
  if(t1||t2)
  {
 if(t1)
   {
    FreeTab[j].size=FreeTab[j].size+size;
   // sort(j+1,FreeTab);
      // release(FreeTab);
    sort(i,UsedTab);
    release(UsedTab);
   }
   //有下临区
   else 
   {
    FreeTab[k].begin=begin;
    FreeTab[k].size=FreeTab[k].size+size;
    sort(i,UsedTab);
    release(UsedTab);
   }
  }

  //无临区
  else
  {
//   strcpy(FreeTab[count].name,NULL);
   count=TabCount(FreeTab);
   FreeTab[count].flag=0;
   FreeTab[count].begin=begin;
   FreeTab[count].size=size;
   sort(i,UsedTab);
      release(UsedTab);
  }
}
}


//**************************output()**************************

void output()
{
int i;
printf("\n******内存可分配区表******\n");
for(i=0; i<50 && FreeTab.flag!=-1; i++)
{
  if(FreeTab.flag==0)
  {
   printf("FreeTab[%d]:%d  ",i,FreeTab.begin);
      printf("%d \n",FreeTab.size);
  }
}
printf("\n\n");
printf("********内存分配表********\n");
for(i=0; i<50 && UsedTab.flag!=-1; i++)
{
  if(UsedTab.flag==1)
  {
   printf("UsedTab[%d]:%d     ",i,UsedTab.begin);
      printf("%d    ",UsedTab.size);
      printf("%s \n",UsedTab.name);
  }
}
}


//*******************Main()***********************
//从用户界面根据用户提示接收一个内存申请，格式为：
//作业名、申请空间的大小。
void main()
{
char name[20];
int size;
int t=1,i=0;
int success=0;
init();
printf("******************** \n");
printf("可变分区分配测试程序 \n");
printf("******************** \n\n\n");
while(t==1)
{
  printf("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \n");
  printf("1、建立作业请按 \n");
  printf("2、完成作业请按 \n");
  printf("3、退出系统请按 \n");
  printf("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \n\n");
  printf("请选择(1-3):");

  //printf("************** \n");

  scanf("%d",&i);
  switch(i)
  {
  case 1:
   printf("请输入作业名：");
   scanf("%s",name);
   printf("请输入作业长度：");
   scanf("%d",&size);
   success=assign(name,size);
   if(success==0)
    printf("内存分配失败!\n");
   output();
   break;
  case 2:
   printf("请输入作业名：");
   scanf("%s",name);
   callback(name);
   output();
   break;
  default:
   t=0;
   break;
  }
}
}


操作系统上机题
文件系统第2题订正，已经通过调试，多谢狗哥找出memset()函数
#ifndef FILE_SIMULATOR
#define FILE_SIMULATOR

#include "stdio.h"
#include "string.h"
#include "stdlib.h"

typedef int errnum;

const char * errstr[]={
 "Everything's ok,this message should never be displayed.",
 "Can not find the file or directory!",
 "No such operation!",
 "Arguments error!"
};

typedef enum{DIR,PLAIN,FILE_BLOCK} node_type;

typedef struct _privilege{
 int level;
}privilege;

typedef struct _node{
 struct _node *next;
 struct _node*sub;
}node;

/************file or directory node文件和目录结点*****/
typedef struct _dnode{
 struct _dnode *next;
 struct _dnode *sub;
 node_type type;
 char name[8];
 privilege pri;
 int size;
}dnode;

dnode *root;
dnode *cur_dir;

/********stack strcture栈结点结构********/
typedef struct _stack_node{
 dnode *elem;
 struct _stack_node *next;
}stack_node;

struct _stack{
 stack_node *top;
}stack;
#endif
//#include "filesys.h"

extern errnum init_chain();
extern errnum free_tree(dnode*);
extern errnum ft_pwd();
extern errnum ft_lsall();
extern errnum ft_cd(char*);
extern errnum ft_ls();
extern errnum ft_rm(char*);
extern errnum ft_rmdir(char*);
extern errnum ft_mkdir(char*);
extern errnum ft_touch(char*);
extern errnum ft_ren(char*,char*);
extern errnum ft_cp(char*,char*);
extern errnum ft_cpdir(char*,char*);

extern dnode* copy_node(dnode*,dnode*);
extern dnode* copy_dnode(dnode*);
void push(dnode*);
dnode*pop();
dnode*top();
void message_out(char*);
void error_out(errnum i);

void message_out(char *message){
 printf("%s",message);
}

void error_out(errnum i){
 printf("%s\n",errstr);
}

/********push压栈********/
void push(dnode *node_the){
 stack_node *new_node;
 new_node=(stack_node*)malloc(sizeof(stack_node));
 new_node->elem=node_the;
 new_node->next=stack.top;
 stack.top=new_node;
}

/**********pop***********/
dnode*pop(){
 dnode *node_the;
 stack_node * ltemp;
 node_the=stack.top->elem;
 ltemp=stack.top->next;
 free(stack.top);
 stack.top=ltemp;
 return(node_the);
}

/***********top取栈顶元素***********/
dnode *top(){
 dnode *node_the;
 node_the=stack.top->elem;
 return(node_the);
}

/*********copy a node复制一个结点********/
dnode* copy_node(dnode * node_the,dnode* node_new){
 node_new->next=NULL;
 node_new->sub=NULL;
 node_new->type=node_the->type;
 strcpy(node_new->name,node_the->name);
 return(node_new);
}

/**********init of the basic chain初始化初始目录树*********/
errnum init_chain(){
 root=(dnode*)malloc(sizeof(dnode));
 root->next=NULL;
 root->sub=NULL;
 root->type=DIR;
 strcpy(root->name,"root");
 /******init the stack初始化栈********/
 stack.top=NULL;
 push(root);
 cur_dir=root;
 return 0;
}

/******telease the space of a subtree 释放一棵子树的空间******/
errnum free_tree(dnode* node_the){
 dnode* node_temp;
 if(node_the->sub==NULL){
  free(node_the);
  return 0;
 }
 node_temp=node_the;
 node_the=node_the->sub;
 free(node_temp);
 while(node_the!=NULL){
  node_temp=node_the;
  node_the=node_temp->next;
  free_tree(node_temp);
 }
 return 0;
}

/*********************/
typedef enum{NOP,EXIT,PWD,LSALL,LS,CD,RM,RMDIR,MKDIR,TOUCH,REN,CP,CPDIR}operations;
const char* operationstr[]={
 "",
 "exit",
 "pwd",
 "lsall",
 "ls",
 "cd",
 "rm",
 "rmdir",
 "mkdir",
 "touch",
 "ren",
 "cp",
 "cpdir"
};

/***********get the operation得到操作数和参数************/
operations get_operation(char* arg[2]){
 int i,j,k;
 char str[256],opstr[256];
 memset(str,0,256);
 memset(opstr,0,256);
 memset(arg[0],0,256);
 memset(arg[1],0,256);
 printf(":\\>");
 gets(str);/**maybe overflow这里可能出现溢出*/
 for(i=0;i<256;i++){
  if((str==' ')||(str==0)) break;
  opstr=str;
 }
 for(j=1;j<=12;j++){
  if(strcmp(opstr,operationstr[j])==0)
   break;
 }
 if(j>12){
  error_out(2);
  return NOP;
 }
    /********0 arguments operations无参数时的操作*******/
 if((j>=EXIT)&&(j<=LS))
  return(j);
 /********1 arguments operations无参数时的操作*******/
 if((j>=CD)&&(j<=TOUCH)){
  if(str==0){
   error_out(3);
   return NOP;
  }
  while((str==' ')&&(i<256)) i++;
  for(k=0;i<256;i++,k++){
   if((str==' ')||(str==0)) break;
   arg[0][k]=str;
  }
  if((i>=256)||(k==0)){
   error_out(3);
   return NOP;
  }
  return(j);
 }
 /******2 arguments operations 2个参数时的操作***/
 if((j>=REN)&&(j<=CPDIR)){
  /*****get arguments 1 得到第一个操作数****/
  if(str==0){
   error_out(3);
   return NOP;
  }
  while((str==' ')&&(i<256)) i++;
  for(k=0;i<256;i++,k++){
   if((str==' ')||(str==0)) break;
   arg[0][k]=str;
  }
  if((i>=256)||(k==0)){
   error_out(3);
   return NOP;
  }
  /**********get argument 2 得到第二个操作数*********/
  while((str==' ')&&(i<256)) i++;
  for(k=0;i<256;i++,k++){
   if((str==' ')||(str==0)) break;
   arg[1][k]=str;
  }
  if((i>=256)||(k==0)){
   error_out(3);
   return NOP;
  }
  return(j);
 }
}
/*********get the full current path得到完整的当前路径*******/
extern errnum ft_pwd(){
 int i=-1,j;
 char name[10][8];
 stack_node *temp;
 temp=stack.top;
 while(!(temp->elem==root)){
  i++;
  strcpy(name,temp->elem->name);
  temp=temp->next;
 }
 printf("%s","root");
 for(j=i;j>=0;j--){
  printf("\\%s",name[j]);
 }
 printf("\n");
 return 0;
}

/**display all the directories and files under the current dor 显示当前目录下的所有目录和文件**/
errnum ft_lsall(){
 dnode* node_the;
 node_the=cur_dir;
 push(node_the);
 do{
  node_the=pop();
  printf("directory <%s>:\n",node_the->name);
  node_the=node_the->sub;
  while(node_the){
   if(node_the->type==DIR)
    printf("<%s>    ",node_the->name);
   else
    printf("%s    ",node_the->name);
   if(node_the->type==DIR){
    push(node_the);
   }
   node_the=node_the->next;
  }
  printf("\n");
 }while(top()!=cur_dir);
 return 0;
}

/*****change directory改变目录*****/
errnum ft_cd(char* path){
 dnode*node_next;
 if(strcmp(path,"..")==0){
  if(cur_dir==root)
   return 0;
  pop();
  cur_dir=stack.top->elem;
  return 0;
 }
 node_next=cur_dir->sub;
 while(node_next){
  if(((strcmp(node_next->name,path))==0)&&(node_next->type==DIR)) break;
  node_next=node_next->next;
 }
 if(node_next==NULL){
  error_out(1);
  return 1;
 }
 else{ /*keep the current stack维护当前目录栈***/
  push(node_next);
  cur_dir=node_next;}
 return 0;
}

/**display the directories and files under the current directory显示当前目录下得目录和文件**/
errnum ft_ls(){
 dnode*node_sub,*node_next;
 node_sub=cur_dir->sub;
 node_next=node_sub;
 while(node_next){
  if(node_next->type==DIR)
   printf("<%s>    ",node_next->name);
  else
   printf("%s    ",node_next->name);
  node_next=node_next->next;
 }
 printf("\n");
 return 0;
}

/******delete the given file删除给定文件******/
errnum ft_rm(char* name){
 dnode *node_next,*node_the;
 node_next=cur_dir;
 node_the=cur_dir->sub;
 while(node_the){
  if((node_the->type==PLAIN)&&(!(strcmp(node_the->name,name))))
   break;
  else{
   node_the=node_the->next;
   if(node_next==cur_dir)
    node_next=node_next->sub;
   else
    node_next=node_next->next;
  }
 }
 if(node_the==NULL){
  error_out(1);
  return 1;
 }
 if(node_the==cur_dir->sub)
  cur_dir->sub=node_the->next;
 else
  node_next->next=node_the->next;
 free(node_the);
 return 0;
}

/******delete the given directory删除给定的目录******/
errnum ft_rmdir(char* name){
 dnode* node_next,*node_the;
 char choice,choice1[5];
 node_next=cur_dir;
 node_the=cur_dir->sub;
 while(node_the){
  if((node_the->type==DIR)&&(!(strcmp(node_the->name,name))))
   break;
  else{
   node_the=node_the->next;
   if(node_next==cur_dir)
    node_next=node_next->sub;
   else
    node_next=node_next->next;
  }
 }
 if(node_the==NULL){
  error_out(1);
  return 1;
 }
 if(node_the->sub){
  message_out("the directory is not NULL,do you want to del it?(y or n)");
  scanf("%c",&choice);
  gets(choice1);
  if(choice=='y'){
   if(node_the==cur_dir->sub)
    cur_dir->sub=node_the->next;
   else
    node_next->next=node_the->next;
   free_tree(node_the);
  }
  else
   return 0;
 }
 else{
  if(node_the==cur_dir->sub)
   cur_dir->sub=node_the->next;
  else
   node_next->next=node_the->next;
  free(node_the);
 }
 return 0;
}

/********make a new directory创建一个目录******/
errnum ft_mkdir(char* name){
 dnode *node_next,*node_new;
 node_new=(dnode*)malloc(sizeof(dnode));
 node_new->next=NULL;
 node_new->sub=NULL;
 node_new->type=DIR;
 strcpy(node_new->name,name);
 if(cur_dir->sub==NULL){
  cur_dir->sub=node_new;
 }
 else{
  node_next=cur_dir->sub;
  while(node_next->next)
   node_next=node_next->next;
  node_next->next=node_new;
 }
 return 0;
}

/*****make a new file创建一个新的文件*****/
errnum ft_touch(char *name){
 dnode* node_new,*node_next;
 node_new=(dnode*)malloc(sizeof(dnode));
 node_new->next=NULL;
 node_new->sub=NULL;
 node_new->type=PLAIN;
 strcpy(node_new->name,name);
 if(cur_dir->sub==NULL){
  cur_dir->sub=node_new;
 }
 else{
  node_next=cur_dir->sub;
  while(node_next->next)
   node_next=node_next->next;
  node_next->next=node_new;
 }
 return 0;
}

/********rename a file or directory重命名一个文件或者目录*****/
errnum ft_ren(char* oldname,char* newname){
 dnode* node_the;
 node_the=cur_dir->sub;
 while(node_the){
  if(strcmp(node_the->name,oldname)==0)
   break;
  else{
   node_the=node_the->next;
  }
 }
 if(node_the==NULL){
  error_out(1);
  return 1;
 }
 else
  strcpy(node_the->name,newname);
 return 0;
}

/****copy a file from the current dir to the given dir 从当前目录复制文件到一个给定的目录***/
errnum ft_cp(char *name,char* dirname){
 dnode *node_the,*node_new;
 node_the=cur_dir->sub;
 while(node_the){
  if((node_the->type==PLAIN)&&(!(strcmp(node_the->name,name))))
   break;
  else{
   node_the=node_the->next;
  }
 }
 if(node_the==NULL){
  error_out(1);
  return 1;
 }
 node_new=(dnode*)malloc(sizeof(dnode));
 node_new=copy_node(node_the,node_new);
 node_the=cur_dir->sub;
 while(node_the){
  if((strcmp(node_the->name,dirname)==0)&&(node_the->type==DIR))
   break;
  else{
   node_the=node_the->next;
  }
 }
 if(node_the==NULL){
  error_out(1);
  return 1;
 }
 if(node_the->sub==NULL){
  node_the->sub=node_new;
 }
 else{
  node_the=node_the->sub;
  while(node_the->next)
   node_the=node_the->next;
  node_the->next=node_new;
 }
 return 0;
}

/*******copy a node拷贝一个结点*****/
dnode* copy_dnode(dnode* node_the){
 dnode* node_new,*node_temp;
 if(node_the->sub==NULL){
  node_new=(dnode*)malloc(sizeof(dnode));
  copy_node(node_the,node_new);
  return(node_new);
 }
 else{
  node_new=(dnode*)malloc(sizeof(dnode));
  copy_node(node_the,node_new);
  node_the=node_the->sub;
  node_new->sub=copy_dnode(node_the);
  node_temp=node_new->sub;
  while(node_the->next!=NULL){
   node_temp->next=copy_dnode(node_the->next);
   node_the=node_the->next;
   node_temp=node_temp->next;
  }
  node_temp->next=NULL;
  return(node_new);
 }
}

/***copy a directory from current dir to the given dir从当前目录复制目录到给定目录下***/
errnum ft_cpdir(char* name,char * dirname){
 dnode * node_the,* node_new;
 node_the=cur_dir->sub;
 while(node_the){
  if((node_the->type==DIR)&&(!(strcmp(node_the->name,name))))
   break;
  else{
   node_the=node_the->next;
  }
 }
 if(node_the==NULL){
  error_out(1);
  return 1;
 }
 node_new=copy_dnode(node_the);
 node_the=cur_dir->sub;
 while(node_the){
  if(!(strcmp(node_the->name,dirname))&&(node_the->type==DIR))
   break;
  else{
   node_the=node_the->next;
  }
 }
 if(node_the==NULL){
  error_out(1);
  return 1;
 }
 if(node_the->sub==NULL){
  node_the->sub=node_new;
 }
 else{
  node_the=node_the->sub;
  while(node_the->next)
   node_the=node_the->next;
  node_the->next=node_new;
 }
 return 0;
}

/*******main主函数***********/
int main(){
 operations op;
 char* arguments[2];
 arguments[0]=malloc(256);
 arguments[1]=malloc(256);
 /********init the directory tree初始化目录树***/
 init_chain();
 /********main loop主循环******/
 for(;;){
  op=get_operation(arguments);
  switch(op){
  case PWD:
   {
    ft_pwd();
       break;
   }
  case LSALL:
   {
    ft_lsall();
       break;
   }
  case CD:
   {
    ft_cd(arguments[0]);
    break;
   }
  case LS:
   {
    ft_ls();
    break;
   }
  case RM:
   {
    ft_rm(arguments[0]);
    break;
   }
  case RMDIR:
   {
    ft_rmdir(arguments[0]);
    break;
   }
  case MKDIR:
   {
    ft_mkdir(arguments[0]);
    break;
   }
  case TOUCH:
   {
    ft_touch(arguments[0]);
    break;
   }
  case REN:
   {
    ft_ren(arguments[0],arguments[1]);
    break;
   }
  case CP:
   {
    ft_cp(arguments[0],arguments[1]);
    break;
   }
  case CPDIR:
   {
    ft_cpdir(arguments[0],arguments[1]);
    break;
   }
  case EXIT:
   {
    goto _out;
   }
  default:;
  }
 }
 /********exiting pricess 退出********/
 _out:
 return 0;
}


[推荐]操作系统上机题
是上机指导书上的第一题，模拟文件系统，做了部分修改，已经调试通过。有许多同学没有此书，特帖上来供大家参考。
我用的编程环境是：VC++ 6.0；  两个文件：头文件filesys.h,主文件filesys.cpp

//filesys.h//
#include <stdio.h>
#include "string.h"
#include "stdlib.h"
#define MaxSize 100
/*******************目录和文件的结构定义*******/
struct DirectoryNode{
 char name[50];                    /*目录或文件的名字*/
 int type;                         /*0代表目录，1代表普通文件*/
 struct DirectoryNode *next;       /*指向下一个兄弟结点的指针*/
 struct DirectoryNode *preDirFile; /*指向父结点的指针*/
 struct DirectoryNode *subFile;    /*指向第一个子结点的指针*/
 int size;                         /*如果是文件则表示文件的大小*/
};

/***********在lsall函数中要用到的相应的队列数据结构****************/
typedef struct{
 struct DirectoryNode *DirFile;
 char name[50];
}DataType;       /*包含一个指向目录的指针和名字*/
typedef struct{           /*队列结构的实现*/
 DataType data[MaxSize];
 int front,rear;       /*分别表示队列的头结点和尾结点*/
}Tp;
void InitCycQueue(Tp *sq){ /*队列初始化*/
 sq->front = 0;
 sq->rear = 0;
} 
int EnCycQueue(Tp *sq,DataType data){  /*在队列中增加元素*/
 if ((sq->rear+1) % MaxSize == sq->front){
  printf("%sQueue is full!");
  return 0;
 }
 else{
  sq->rear = (sq->rear+1) % MaxSize;
  sq->data[sq->rear] = data;
  return 1;
 }
}
DataType OutCycQueue(Tp *sq){ /*从队列中删除一个元素*/
 if(sq->front == sq->rear)
  printf("%sQueue is empty!");
 else{
  sq->front = (sq->front+1) % MaxSize;
  return(sq->data[sq->front]);
 }
}
int Empty(Tp *sq){ /*判断队列是否为空，返回0表示队列为空*/
 if(sq->front == sq->rear)
  return 0;
 else return 1;
}
/**************************队列定义结束*******************/
struct DirectoryNode *workDirFile; /*当前工作目录*/
struct DirectoryNode root;         /*根目录*/
char path[50] = "pkutest"; /*path info*/

	


	  
系统班练习 2004-05-19 下午
请分别用FIFO、OPT算法实现“页面置换”的模拟。模拟程序的要求如下：
输入：页面流文件，其中存储的是一系列页面号，用来模拟待换入的页面。
输出：对于每一个页面流文件，标出所使用的算法，并且：每换入一个页面（即：每读入一个页面号），判断是否有页面需要被换出。若有，把被换出的页面号输出到屏幕；若没有，则要在输出中用特殊标记说明。
初始条件：采用三个页框，初始时均为空。
测试说明：测试教师将事先准备好一组文件，从中为每个程序随机指定一至三个作为输入文件（被测试者需从键盘输入指定文件的文件名），并查看程序输出结果。


  [原创]刚做完系统班上机题第二题
/*******************************************************************/
//请分别用FIFO、OPT算法实现“页面置换”的模拟。模拟程序的要求如下：
//
//输入：页面流文件，其中存储的是一系列页面号，用来模拟待换入的页面。
//
//输出：对于每一个页面流文件，标出所使用的算法，
//并且：每换入一个页面（即：每读入一个页面号），判断是否有页面需要被换出。
//若有，把被换出的页面号输出到屏幕；若没有，则要在输出中用特殊标记说明。
//
//初始条件：采用三个页框，初始时均为空。
//
//测试说明：测试教师将事先准备好一组文件，
//从中为每个程序随机指定一至三个作为输入文件
//（被测试者需从键盘输入指定文件的文件名），并查看程序输出结果。
//测试用例：书上p119页，在本地盘建立一个test.txt文件，内容为例中的页面号
//例如：test文本内容为：
//      4 3 2 1 4 3 5 4 3 2 1 5jjjjjjjjj
//      kkkk
//      jklilkjjj
/******************************************************************/
#include "stdio.h"
#include "string.h"
#include "stdlib.h"
#include "iostream.h"

void FIFO(int page[],int n){
int mem[3]={0,0,0};
int flag = 0;
int i,j;
int d=0;
int count = 0;

cout<<endl<<"# 代表无命中"<<"   "<<"！后跟的数字代表被换出的页"<<endl;
cout<<endl<<"FIFO算法："<<endl;
//  mem[2]=page[0];
//  mem[1]=page[1];
//  mem[0]=page[2];
//  cout<<mem[0]<<' '<<mem[1]<<' '<<mem[2]<<endl;

  for(i = 0; i<n; i++){
   flag = 0;
   for(j = 0; j<3; j++){
    if(mem[j] == page) flag = 1;
   }
   if(flag) cout<<mem[0]<<' '<<mem[1]<<' '<<mem[2]<<"   #"<<endl;
   else {
    count++;
    d = mem[2];
    mem[2] = mem[1];
    mem[1] = mem[0];
    mem[0]=page;
    cout<<mem[0]<<' '<<mem[1]<<' '<<mem[2]<<"   !"<<d<<endl;
    
   }
  }
  cout<<endl<<"共产生缺页中断："<<count<<"次!"<<endl;


};
int max(int a,int b){
return a>b?a:b;
}
void OPT(int page[],int n){
int mem[3]={0,0,0};
int flag = 0;
int i,j,s;
int d=0;
int count = 0;
int c0=99;
int c1=99;
int c2=99;

cout<<endl<<"# 代表无命中"<<"   "<<"！后跟的数字代表被换出的页"<<endl;
cout<<endl<<"OPT算法："<<endl;
mem[2]=page[0];
mem[1]=page[1];
mem[0]=page[2];
cout<<mem[0]<<' '<<mem[1]<<' '<<mem[2]<<endl;

for(i = 3; i<n; i++){
  flag = 0;
  for(j = 0; j<3; j++){
   if(mem[j] == page) flag = 1;
  }
  if(flag) cout<<mem[0]<<' '<<mem[1]<<' '<<mem[2]<<"   #"<<endl;
  else {
   for(s = i+1; s<n; s++){
    if (mem[0] == page[s]) c0 = s;
    else {
     if(mem[1] == page[s]) c1 = s;
     else {
      if(mem[2] == page[s]) {
       c2 =s;
      }
      else if(c0!=99 && c1!=99 && c2!=99) break;
     }
    }
    
   }
//  cout<<endl<<c0<<c1<<c2<<" ";
   if (c0 >= c1 && c0 >= c2) {
    d = mem[0];
    mem[0] = page;
    cout<<mem[0]<<' '<<mem[1]<<' '<<mem[2]<<"   !"<<d<<endl;
   }
   else if (c1 >= c0 && c1 >= c2) {
     d = mem[1];
     mem[1] = page;
     cout<<mem[0]<<' '<<mem[1]<<' '<<mem[2]<<"   !"<<d<<endl;
    }
   else {
     d = mem[2];
     mem[2] = page;
     cout<<mem[0]<<' '<<mem[1]<<' '<<mem[2]<<"   !"<<d<<endl;
    }
   count++;
   c0 = c1 = c2 = 99;
      
  }
}
cout<<endl<<"共产生缺页中断："<<count+3<<"次!"<<endl; 
};
void main(){
FILE *fp;
char pt;
char str[10];
int i = 0;
int j = 0;
int page[50];
int flag = 1;

for(i=0; i<50; i++){
  page = -1;
}
// cout<<"请输入文件路径：";  题目要求读入文件路径，打开时有小错误，改成指定文件名方式
// gets(str);
fp = fopen("test.txt","r+");
if(fp==NULL) {
  cout<<endl<<"找不到该文件"<<endl;
  exit(0);
}
while((pt = fgetc(fp)) != EOF){
  i = 0;
  if(pt>='0' && pt<='9'){
   str = pt;
   i++;
   flag = 1;
   str = '\0';
   page[j] = atoi(str);
   j++;
  // cout<<endl<<page[j++];
  
  }
  else {
   if (pt == '\n') break;
  }
}
cout<<j<<endl;
i = 0;
while(page != -1) {
  cout<<" "<<page;
  i++;
}

FIFO(page,j);
OPT(page,j);
}
