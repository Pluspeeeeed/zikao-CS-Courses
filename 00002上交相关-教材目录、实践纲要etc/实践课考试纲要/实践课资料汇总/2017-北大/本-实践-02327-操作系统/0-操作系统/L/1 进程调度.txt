//进程调度
#include <stdio.h>
#include <string.h>
#include <iostream.h>
const int blocktime = 10;
const int MAXPCB = 100;
typedef struct{
	char name[20];

	int time;
	int privilege;
	int finish;
	int waittime;
}pcbs;
pcbs pcb[MAXPCB];//进程序列
int num; 

//初始化函数
void initial(){
	int i;
	for (i=0;i<MAXPCB;i++)
	{
		strcpy(pcb[i].name,"");
		pcb[i].time=0;
		pcb[i].privilege=0;
		pcb[i].finish=0;
		pcb[i].waittime=0;
	}
	num=0;
}


//读入数据
int read()
{
	FILE *fp;
	char fname[20];
	int i;
	cout<<"请输入进程流文件名:";
	cin>>fname;
	if((fp=fopen(fname,"r"))==NULL)
	{
		cout<<" 文件无法打开,请检查文件名!"<<endl;
	}
	else
	{
		/*while(!feof(fp))
		{
			fscanf(fp,"%s%d%d%d",&pcb[num].name,&pcb[num].time,&pcb[num].privilege,&pcb[num].finish);
			num++;
		}*/
		while(!feof(fp)&&num<MAXPCB)			/*当没有到文件尾时，从文件中读入数据*/
		{
			fscanf(fp,"%s%d%d%d",&pcb[num].name,&pcb[num].time,&pcb[num].privilege,&pcb[num].finish);
			if(feof(fp)) break;			/*到文件尾，结束*/
			num++;					/* 记录从文件中读入的进程数*/
		}		
		cout<<"读入的数据为:"<<endl;
		for (i=0;i<num;i++)
		{
			cout<<pcb[i].name<<" "
				
				<<pcb[i].time<<" "
				<<pcb[i].privilege<<" "
				<<pcb[i].finish<<endl; 
		}
		return 1;
	}
	return 0;
}

//重置数据,供另一个算法使用
void init(){
	int i;
	for(i=0;i<num;i++){
		pcb[i].finish=0;
		pcb[i].waittime=0;
	}
}
		
//FIFO
void FIFO()
{
int i,j,total;
cout<<"FIFO算法执行的进程顺序为:"<<endl;
cout<<"进程名   等待时间"<<endl;
for(i=0;i<num;i++)
{
	cout<<pcb[i].name<<"     "
		<<pcb[i].time<<endl;
	for (j=i+1;j<num;j++)
	{
	pcb[i].finish=1;
	pcb[j].waittime+=pcb[i].time;//pcb[i]的运行时间 每个pcb[i+1]都等待,先把每个pcb[i+1]都加上pcb[i].time;
	}

}
total=0;
for(i=0;i<num;i++)
{
	total+=pcb[i].waittime;
}
cout<<"总等待时间是"<<total<<endl
	<<"平均等待时间是"<<total/num<<endl;
	

}

//优先级调度算法
void privilege(){
	int i,j,p;
	int total,pass=0;
	int queue[MAXPCB];//就绪队列的整数数组
		cout<<"最高优先级顺序流是:"<<endl;
		cout<<"进程名   优先级   等待时间"<<endl;	
	for(i=0;i<num;i++)
	{
		int cprivilege=1000;
		for(j=0;j<num;j++){
			if((pcb[j].finish==0)&&(pcb[j].privilege<cprivilege)){
			p=j;
			cprivilege=pcb[j].privilege;
			}
		}
		queue[i]=p;
		pcb[p].finish=1;
		pcb[p].waittime+=pass;
		pass+=pcb[p].time;

		cout<<pcb[p].name<<"       "<<pcb[p].privilege<<"      "<<pcb[p].waittime<<endl;
	
	}
	total=0;
	for (i=0;i<num;i++){
		total+=pcb[i].waittime;
	}
	cout<<"总等待时间是"<<total<<endl
	<<"平均等待时间是"<<total/num<<endl;
	

}


//时间片轮转算法

void time(){
	int i,j,n,flag=1;
	int pass=0;
	int maxtime=0;
	int round=0;
	int queue[1000];
	int total=0;
	while(flag==1){
		flag=0;
		n=0;
		for(i=0;i<num;i++)
		{
			if(pcb[i].finish==0)
			{
				n++;
				j=i;

			}

		}
		if(n==1)
		{
			queue[total]=j;
			total++;
			pcb[j].finish=1;
		}
		if(n>1)
		{
			for(i=0;i<num;i++)
			{
				if (pcb[i].finish==0)
				{
					flag=1;
					queue[total]=i;
					total++;
					if(pcb[i].time<=blocktime*(round+1))
					{
						pcb[i].finish=1;
					}
				}
			
			}
		}
		round++;
	}
	cout<<"时间片轮转算法顺序流是:"<<endl;
	for (i=0;i<total;i++)
	{
		cout<<pcb[queue[i]].name<<"     "<<pcb[queue[i]].time<<endl;
	}

}

//主函数
void main()
{
	int f,ch,c=1;
	initial();
	f=read();
	if(f==1)
	{
		while(c)
		{
			cout<<"1 FIFO"<<endl
				<<"2 最高优先级调度算法"<<endl
				<<"3 时间片轮转调度算法"<<endl
				<<"4 退出系统"<<endl;
			cout<<"请选择:";
			cin>>ch;
			switch(ch)
			{
			case 1:
				init();
				FIFO();
				break;
			case 2:
				init();
				privilege();
				break;
			case 3:
				init();
				time();
				break;
			case 4:
				c=0;
				break;
			default:
				cout<<"选择错误!请重新选择:";
				break;
			}
		}
		cout<<"Thank You"<<endl;

	}


}
