#include <stdio.h>
#include <string.h>
#include <iostream.h>
const int max=3;
const int maxsize=100;
typedef struct 
{
	int id;
	int hit;
}pages;
pages page[max];
int queue[maxsize];
int num;
//初始化函数
void initiral()
{
	int i;
	for(i=0;i<max;i++)//初始化页框
	{
		page[i].id=-1;
		page[i].hit=0;
	}
	for(i=0;i<maxsize;i++)//初始化页面流
	{
		queue[i]=-1;
	}
	num=0;//num
}

//初始化页框,供另一调度算法使用
void init()
{
	int i;
	for(i=0;i<max;i++)
	{
		page[i].id=-1;
		page[i].hit=0;
	}
}

//读入数据
int read()
{
	int i;
	FILE *fp;
	char fname[20];
	cout<<"文件名:";
	//cin>>fname;
	strcpy(fname,"x.txt");
	if((fp=fopen(fname,"r"))==NULL)
	{
		cout<<"文件无法打开!";
		return 0;
	}
	else
	{
		while(!feof(fp))
		{
			fscanf(fp,"%d",&queue[num]);
			num++;
		}
		cout<<"读入的页面流为:"<<endl;
		for(i=0;i<num;i++)
		{
			cout<<queue[i]<<" ";
		}
		
		cout<<endl;
		return 1;
	}
}

//FIFO
void FIFO()
{
	int i,j,p,flag;
	int total=0;
	p=0;
	cout<<"================================================"<<endl;
	cout<<"FIFO算法,页面调出顺序为:"<<endl;
	for(i=0;i<num;i++)
	{
		flag=0;
		for(j=0;j<max;j++)
		{
			if(page[j].id==queue[i])
			{
				flag=1;
			}
		}
		if(flag==0)//产生缺页中断
		{
			if(total>=max)//比3大才输出其页面号
			{
				cout<<page[p].id<<" ";
			}
			page[p].id=queue[i];//调入这一页
			total++;//缺页次数加1
			p=(p+1)%max;//p向后移动1 个位置
		}
	}
	total-=max;
	cout<<endl<<"总缺页次数是:  "<<total<<endl;
	cout<<"================================================"<<endl;
}

//最近最久未使用调度算法
void LRU()
{
	int i,j,flag,total=0;
	pages temp;
	for(i=0;i<max;i++)
	{
		page[i].id=queue[i];
	}
	cout<<"================================================"<<endl;

	cout<<"LRU算法调出页面流: "<<endl;
	for(i=max;i<num;i++)
	{
		flag=-1;
		for(j=0;j<max;j++)
		{
			if(queue[i]==page[j].id)//页框中是否有一页与queue[max]相同
			{
				flag=j;//有 改变flag
			}
		}
		if(flag==-1)//页框中没这页
		{//缺页处理
			cout<<page[0].id<<" ";//输出页框头page[0]
			for(j=0;j<max-1;j++)//页框依次前移
			{
				page[j]=page[j+1];
			}
			page[max-1].id=queue[i];
			total++;
		}
		else//页面已经载入页框,不缺页中断
		{
			temp=page[flag];
			for(j=flag;j<max-1;j++)
			{
				page[j]=page[j+1];
			}
			page[max-1]=temp;
		}
	}
	cout<<endl<<"总缺页次数是:  "<<total<<endl;
	cout<<"================================================"<<endl;

}


//最近最不经常使用算法调度
void LFU()
{
	int i,j,p,flag,total=0;
	for(i=0;i<max;i++)
	{
		page[i].id=queue[i];
	}
	cout<<"================================================"<<endl;
	cout<<"LFU算法调出页面流: "<<endl;
	for(i=max;i<num;i++)
	{
		flag=-1;
		for(j=0;j<max;j++)
		{
			if(queue[i]==page[j].id)//页框中是否有一页与queue[max]相同
			{
				flag=1;//有 改变flag
				page[j].hit++;
			}
		}
		if(flag==-1)//页框中没这页
		{//缺页处理
			p=0;
			for(j=0;j<max;j++)//页框依次前移
			{
				if(page[j].hit<page[p].hit)//hit表示被访问的次数,越小,越久没被访问
				{
					p=j;//p记录 标号
				}
			}
			cout<<page[p].id<<" ";//调出它

			page[p].id=queue[i];
			total++;//次数+1
			for(j=0;j<max;j++)//清空hit,重新计算
			{
				page[j].hit=0;
			}
		}
	
	}
	cout<<endl<<"总缺页次数是:  "<<total<<endl;
	cout<<"================================================"<<endl;

}

//第二次机会算法

void second()
{
	int i,j,t,temp,flag,total=0;
	cout<<"================================================"<<endl;
	cout<<"第二次机会算法页面调出流:"<<endl;
	for(i=0;i<max;i++)
	{
		page[i].id=queue[i];
	}
	for(i=max;i<num;i++)
	{
		flag=-1;
		for(j=0;j<max;j++)
		{
			if(queue[i]==page[j].id)//页框中是否有一页与queue[max]相同
			{
				flag=1;//有 改变flag
				page[j].hit=1;//表示该页面已经在主存内
			}
		}
		if(flag==-1)//页框中没这页
		{//缺页处理
			t=0;
			while(t==0)
			{
				if(page[0].hit==0)//如果page[0].hit==0,就将它置为空闲,调出它
				{
					cout<<page[0].id<<" ";//调出它
					for(j=0;j<max-1;j++)//前移
					{
						page[j]=page[j+1];
					}
					page[max-1].id=queue[i];//调入
					page[max-1].hit=0;
					total++;//次数加1
					t=1;
				}
				else
				{//如果page[0].hit==1,就将它置为0,将它移至页框尾,下一次的page[0]就不是它了
					temp=page[0].id;
					for(j=0;j<max-1;j++)
					{
						page[j]=page[j+1];
					}
					page[max-1].id=temp;
					page[max-1].hit=0;
				}
			}
					
		}
	}
	cout<<endl<<"总缺页次数是:  "<<total<<endl;
	cout<<"================================================"<<endl;
}

void main()
{
	int c=1,ch,n;
	initiral();
	n=read();
if(n==1)
{
	while(c==1)
	{
		cout<<"1 FIFO 2 LRU 3 LFU 4 Second 5 退出"<<endl;
		cout<<"请选择: ";
		cin>>ch;
		switch(ch)
		{
		case 1:
			init();
			FIFO();
			break;
		case 2:
			init();
			LRU();
			break;
		case 3:
			init();
			LFU();
			break;
		case 4:
			init();
			second();
			break;
		case 5:
			c=0;
			break;
		default:
			cout<<"输入错误!"<<endl;
			break;

		}
	}
	cout<<"谢谢您使用本系统!再见!"<<endl;
}
}