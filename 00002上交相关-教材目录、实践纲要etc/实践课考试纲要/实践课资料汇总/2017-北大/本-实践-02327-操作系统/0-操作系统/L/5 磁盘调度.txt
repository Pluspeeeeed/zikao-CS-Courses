#include <iostream.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
const int max=20;
typedef struct {

	int go;
	int finish;
}que;
que queue[max];
int num;
int start;
//初始化函数
void initiral()
{
	int i=0;
	for(i=0;i<max;i++)
	{
		queue[i].go=-1;
		queue[i].finish=-1;
	}
	num=0;
	cout<<"请输入初始磁头所在磁道号:";
	//cin>>start;
	start=53;
}

//读入函数
void read()
{
	FILE *fp;
	int i,temp;
	char fname[20];
	cout<<"请输入要访问的磁道流文件名:";
	//cin>>fname;
	strcpy(fname,"c.txt");
	if((fp=fopen(fname,"r"))==NULL)
	{
		cout<<"文件无法打开!"<<endl;
	}
	else
	{
		while(!feof(fp))
		{
			fscanf(fp,"%d",&temp);
			queue[num].go=temp;
			num++;
		}
		cout<<"读入的数据为:"<<endl;
		for(i=0;i<num;i++)
		{
			cout<<queue[i].go<<" ";
		}
		
		cout<<endl<<"请求数为:"<<num<<endl;
	}
}

//重置数据,供另一算法使用
void init()
{
	int i;
	for(i=0;i<num;i++)
	{
		queue[i].finish=0;
	}
}

//FIFO
void FIFO()
{
	int i,c,total=0;
	cout<<"-----------------------------------------"<<endl;
	cout<<endl<<"FIFO访问顺序流为:"<<endl;
	c=start;
	for(i=0;i<num;i++)
	{
		cout<<queue[i].go<<" ";
		queue[i].finish=1;
		total+=abs(queue[i].go-c);
		c=queue[i].go;//修改c,要在计算过总柱面数以后
	}
	cout<<endl<<"磁头移过的柱面数为:  "<<total<<endl;
	cout<<"-----------------------------------------"<<endl;
}

//最短寻到算法
void shortest()
{
	int i,j,c,p=0;
	int total=0;
	cout<<"-----------------------------------------"<<endl;
	cout<<endl<<"最短寻到算法顺序流为:  "<<endl;
	c=start;
	for(i=0;i<num;i++)
	{
		p=0;
		while(queue[p].finish!=0)
		{
			p++;		
		}
		for(j=0;j<num;j++)
		{
			if((queue[j].finish==0)&&(abs(queue[j].go-c)<abs(queue[p].go-c)))
			{
				p=j;
			}
		}
		queue[p].finish=1;
		cout<<queue[p].go<<" ";		
		total+=abs(queue[p].go-c);
		c=queue[p].go;//修改c,要在计算过总柱面数以后
	}
	cout<<endl;
	cout<<"磁头移过的柱面数为:  "<<total<<endl;
	cout<<"-----------------------------------------"<<endl;
	
}

//电梯调度算法
void dt()
{
	int i,j,p,flag;
	int c,total=0;
	cout<<"-----------------------------------------"<<endl;
	cout<<endl<<"磁头初始向里移动的顺序流是: "<<endl;
	c=start;

for(i=0;i<num;i++)
{
		flag=1000;
		p=-1;
		for(j=0;j<num;j++)
		{
			if((queue[j].finish==0)&&(queue[j].go>c))//先判断是否磁道号大于c
			{
				if(abs(queue[j].go-c)<flag)//找距离最短的磁道
				{
					p=j;
					flag=abs(queue[j].go-c);
				}				
			}
		}
	
	if(p!=-1)
	{
		cout<<queue[p].go<<" ";
		queue[p].finish=1;		
		total+=abs(queue[p].go-c);
		c=queue[p].go;
	}
	else//大于start的刺刀号都已经访问过之后,开始访问逼start小的磁道号
	{
		for(j=0;j<num;j++)
		{
			if((queue[j].finish==0)&&(queue[j].go<c))//先判断是否磁道号小于c
			{
				if(abs(queue[j].go-c)<flag)//找距离最短的磁道
				{
					p=j;
					flag=abs(queue[j].go-c);
				}
			}
		}
		cout<<queue[p].go<<" ";
		queue[p].finish=1;	
		total+=abs(queue[p].go-c);
		c=queue[p].go;//修改c,要在计算过总柱面数以后
	}
	
}
	cout<<endl<<"移过的柱面数是  "<<total<<endl;
cout<<"-----------------------------------------"<<endl;
init();
total=0;
c=start;
cout<<"-----------------------------------------"<<endl;
cout<<endl<<"磁头初始向外移动的顺序流是: "<<endl;
for(i=0;i<num;i++)
{
		flag=1000;
		p=-1;
		for(j=0;j<num;j++)
		{
			if((queue[j].finish==0)&&(queue[j].go<c))//先判断是否磁道号小于c
			{
				if(abs(queue[j].go-c)<flag)//找距离最短的磁道
				{
					p=j;
					flag=abs(queue[j].go-c);
				}				
			}
		}
	
	if(p!=-1)
	{
		cout<<queue[p].go<<" ";
		queue[p].finish=1;		
		total+=abs(queue[p].go-c);
		c=queue[p].go;
	}
	else
	{
		for(j=0;j<num;j++)
		{
			if((queue[j].finish==0)&&(queue[j].go>c))
			{
				if(abs(queue[j].go-c)<flag)
				{
					p=j;
					flag=abs(queue[j].go-c);
				}
			}
		}
		cout<<queue[p].go<<" ";
		queue[p].finish=1;	
		total+=abs(queue[p].go-c);
		c=queue[p].go;
	}
	
}
	cout<<endl<<"移过的柱面数是:  "<<total<<endl;

}



void main()
{
	initiral();
	read();
	FIFO();
	init();
	shortest();
	init();
	dt();


}
