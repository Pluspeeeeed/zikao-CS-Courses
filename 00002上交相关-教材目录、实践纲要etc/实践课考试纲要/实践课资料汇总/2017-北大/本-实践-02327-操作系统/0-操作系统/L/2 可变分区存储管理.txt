#include <iostream.h>
#include <iomanip.h>
#include <string.h>
#include<stdio.h>
const int maxjob=100;
typedef struct{
	int start;
	int length;
	char tag[20];
}job;
job free[maxjob];
int freenum;
job o[maxjob];
int onum;
//初始化函数
void initial()
{
	int i;
	for(i=0;i<maxjob;i++)
	{
		free[i].start=-1;
		free[i].length=0;
		strcpy(free[i].tag,"free");
		strcpy(o[i].tag,"");
		o[i].start=-1;
		o[i].length=0;
	}
	freenum=0;
	onum=0;
}

//读数据函数
int read()
{
	FILE *fp;
	char fname[20];
	cout<<"初始空闲表文件名:";
	cin>>fname;
	if((fp=fopen(fname,"r"))==NULL)
	{
		cout<<"文件无法打开,请检查文件名!"<<endl;
	}
	else
	{
		while (!feof(fp))
		{
			fscanf(fp,"%d%d",&free[freenum].start,&free[freenum].length);
			freenum++;
		}
		return 1;
	}
	return 0;
}
//按空闲区的起始地址大小排序
void sort()
{
	int i,j,p;
	for (i=0;i<freenum;i++)
	{
		p=i;
		for (j=i+1;j<freenum;j++)
		{
			if(free[j].start<free[p].start)
			{
				p=j;
			}
		}
		if(p!=i)
		{
			free[freenum]=free[i];
			free[i]=free[p];
			free[p]=free[freenum];
		}
	}
}

//显示函数
void view()
{
	int i;
	cout<<"当前空闲表:"<<endl;
	cout<<"起始地址     长度    状态"<<endl;
	for(i=0;i<freenum;i++)
	{
	cout<<free[i].start<<"      "<<free[i].length<<"       "<<free[i].tag<<endl;
	}
	cout<<"当前已分配表:"<<endl;
	cout<<"起始地址     长度    占用作业名"<<endl;
	for(i=0;i<onum;i++)
	{
	cout<<o[i].start<<"      "<<o[i].length<<"       "<<o[i].tag<<endl;
	}

}

//最先适应分配算法
void earliest()
{
	char name[20];
	int length;
	int i,j,flag,t;
	cout<<"申请空间的作业名:";
	cin>>name;
	cout<<"作业要申请空间的大小:";
	cin>>length;
	flag=0;
	for(i=0;i<freenum;i++)
	{
		if(free[i].length>=length)
		{
			flag=1;
		}
	}
	if(flag==0)
	{
		cout<<"当前没有满足条件的空闲内存!请稍后再试!"<<endl;
	}
	else
	{
		t=0;
		i=0;
		while(t==0)
		{
			if(free[i].length>=length)
			{
				t=1;
			}
			i++;//从0开始查找长度足够的空闲区
		}
		i--;//找到后 i-1 就是那个空闲区标号
		o[onum].start=free[i].start;
		o[onum].length=length;
		strcpy(o[onum].tag,name);
		onum++;
		if(free[i].length>length)
		{
			free[i].start+=length;
			free[i].length-=length;
		}
		else//就是free[i].length=length的情况
		{
			for(j=i;j<freenum-1;j++)
			{
				free[j]=free[j+1];
			}
			freenum--;
		}
		cout<<"分配内存成功!!"<<endl;

	}


}

//最优适应算法
void good()
{
	char name[20];
	int length;
	int i,j,flag,t;
	cout<<"申请空间的作业名:";
	cin>>name;
	cout<<"作业要申请空间的大小:";
	cin>>length;
	flag=0;
	for(i=0;i<freenum;i++)
	{
		if(free[i].length>=length)
		{
			flag=1;
		}
	}
	if(flag==0)
	{
		cout<<"当前没有满足条件的空闲内存!请稍后再试!"<<endl;
	}
	else
	{
		t=0;
		i=0;
		while(t==0)
		{
			if(free[i].length>=length)
			{
				t=1;
			}
			i++;//从0开始查找长度足够的空闲区
		}
		i--;//找到后 i-1 就是那个满足条件空闲区标号
		for(j=0;j<freenum;j++)
		{
			if((free[j].length>=length)&&(free[i].length>=free[j].length))
			{
				i=j;
			}
		}
		o[onum].start=free[i].start;
		o[onum].length=length;
		strcpy(o[onum].tag,name);
		onum++;
		if(free[i].length>length)
		{
			free[i].start+=length;
			free[i].length-=length;
		}
		else//就是free[i].length=length的情况
		{
			for(j=i;j<freenum-1;j++)
			{
				free[j]=free[j+1];
			}
			freenum--;
		}
		cout<<"分配内存成功!!"<<endl;

	}
	
}

//最坏适应算法
void wrost()
{
	char name[20];
	int length;
	int i,j,flag,t;
	cout<<"申请空间的作业名:";
	cin>>name;
	cout<<"作业要申请空间的大小:";
	cin>>length;
	flag=0;
	for(i=0;i<freenum;i++)
	{
		if(free[i].length>=length)
		{
			flag=1;
		}
	}
	if(flag==0)
	{
		cout<<"当前没有满足条件的空闲内存!请稍后再试!"<<endl;
	}
	else
	{
		t=0;
		i=0;
		while(t==0)
		{
			if(free[i].length>=length)
			{
				t=1;
			}
			i++;//从0开始查找长度足够的空闲区
		}
		i--;//找到后 i-1 就是那个满足条件空闲区标号
		for(j=0;j<freenum;j++)
		{
			if((free[j].length>=length)&&(free[i].length<=free[j].length))
			{
				i=j;
			}
		}
		o[onum].start=free[i].start;
		o[onum].length=length;
		strcpy(o[onum].tag,name);
		onum++;
		if(free[i].length>length)
		{
			free[i].start+=length;
			free[i].length-=length;
		}
		else//就是free[i].length=length的情况
		{
			for(j=i;j<freenum-1;j++)
			{
				free[j]=free[j+1];
			}
			freenum--;
		}
		cout<<"分配内存成功!!"<<endl;

	}
	
}

//撤销作业
void finished()
{
	char name[20];
	int start,length;
	int i,j,flag;
	cout<<"要撤销的作业名:";
	cin>>name;
	flag=-1;
	for(i=0;i<onum;i++)
	{
		if(!strcmp(o[i].tag,name))
		{
			flag=i;
			start=o[i].start;
			length=o[i].length;
		}
	}
	if (flag==-1)
	{
		cout<<"没有这个作业,或者作业名错误!"<<endl;
	}
	else
	{
		for(i=0;i<freenum;i++)
		{
			if(free[i].start+free[i].length==start)//有上临
			{
				if(((i+1)<freenum)&&(free[i+1].length==start+length))//有上临 有下临
				{
					free[i].length=free[i].length+free[i+1].length+length;
					for(j=i+1;j<freenum-1;j++)
					{
						free[j]=free[j+1];
					}
					freenum--;
				}
				else//有上临 无下临
				{
					free[i].length+=length;
				}
			}
		    else //无上临
			{
				if(free[i].start==(start+length))//无上临 有下临
				{
					free[i].start=start;
					free[i].length+=length;
				}
				else//无上临 无下临
				{
					free[freenum].start=start;
					free[freenum].length=length;
					freenum++;
				}
			}			
		}
	}

}

//主函数
void main()
{
	int c=1,ch,m;
	initial();
	m=read();
	if(m==1)
	{
		sort();
		while(c==1)
		{
			cout<<"1 分配作业-最先适应分配"<<endl
				<<"2 分配作业-最优适应分配"<<endl
				<<"3 分配作业-最坏适应分配"<<endl
				<<"4 撤销作业"<<endl
				<<"5 显示分配情况"<<endl
				<<"6 退出"<<endl;
			cout<<"请选择";
			cin>>ch;
			switch(ch)
			{
			case 1:
				earliest();
				break;
			case 2:
				good();
				break;
			case 3:
				wrost();
				break;
			case 4:
				finished();
				break;
			case 5:
				view();
				break;
			case 6:
				c=0;
				break;
			default:
				cout<<"从新选择:"<<endl;

			}
		}
	}
}