1．编一C程序，它能读入两组整数（每组整数都是66个整数），它们分别是下三角矩阵A和下三角矩阵B的
按行优先排列的元素（A和B的其它元素均为零）。计算并输出矩阵A与B的乘积。
（注：程序的可执行文件名必须是 e1.exe，存于你的账号或其debug目录下。）
#include "stdafx.h"
#include <stdio.h>
#define MAX 66//调式的值可以改小
#define M 11//可以根据上面的值相应的改小，公式：n*(n+1)/2=MAX.
void juzhen(int a[],int b[],int C[][M])
{
	int i,j,k;
	int A[M][M],B[M][M];
	for(i=0;i<M;i++){
		for(j=0;j<M;j++){
			A[i][j]=0;
			B[i][j]=0;
			C[i][j]=0;
		}
	}
    k=0;
    for(i=0;i<M;i++)    //数组值赋给A,B；
		for(j=0;j<=i;j++)
		{
			A[i][j]=a[k];
		    B[i][j]=b[k]; 
			k++;
		}		
    for(i=0;i<M;i++)
	  for(j=0;j<M;j++)
	    for(k=0;k<M;k++)
	       C[i][j]+=A[i][k]*B[k][j];
}
void main()
{
	int i,j,t=0;
	int a[MAX],b[MAX],c[M][M];
	printf("请输入第一组整数:\n");
	for(i=0;i<MAX;i++)
		scanf("%d",&a[i]);
	printf("请输入第二组整数:\n");
	for(j=0;j<MAX;j++)
		scanf("%d",&b[j]);
	juzhen(a,b,c);
	printf("输出的矩阵乘积为:\n");
	for(i=0;i<M;i++)
		for(j=0;j<M;j++){
			printf("%-4d",c[i][j]);
			if((++t)%M==0)
				printf("\n");
		}
}







