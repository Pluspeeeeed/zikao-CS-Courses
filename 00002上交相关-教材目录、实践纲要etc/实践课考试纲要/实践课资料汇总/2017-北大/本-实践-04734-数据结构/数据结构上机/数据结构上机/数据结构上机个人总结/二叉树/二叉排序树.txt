//二叉排序树
#include <stdio.h> 
#include <stdlib.h> 
typedef int KeyType; 
typedef struct node{ 
KeyType key; 
struct node *lchild,*rchild; 
}BSTNode; 
typedef BSTNode *BSTree;
 
BSTree CreateBST(void); 
void SearchBST(BSTree T,KeyType Key); 
BSTree InsertBST(BSTree Tptr,KeyType Key); 
void DelBSTNode(BSTree *Tptr,KeyType Key); 
void InorderBST(BSTree T); 

void main() 
{
BSTree T; 
char ch1,ch2; 
KeyType Key; 
printf("建立一棵二叉排序树的二叉链表存储\n"); 
T=CreateBST(); 
ch1='y'; 
while (ch1=='y' || ch1=='Y') 
{
printf("请选择下列*作：\n"); 
printf("1------------------更新二叉排序树存储\n"); 
printf("2------------------二叉排序树上的查找\n"); 
printf("3------------------二叉排序树上的插入\n"); 
printf("4------------------二叉排序树上的删除\n"); 
printf("5------------------二叉排序树中序输出\n"); 
printf("6------------------退出\n"); 
scanf("\n%c",&ch2); 
switch (ch2) 
{
case '1':T=CreateBST();break; 
case '2':printf("\n请输入要查找的数据："); 
scanf("\n%d",&Key); 
SearchBST(T,Key); 
printf("查找*作完毕。\n");break; 
case '3': printf("\n请输入要插入的数据："); 
scanf("\n%d",&Key); 
T=InsertBST(T,Key); 
printf("插入*作完毕。\n");break; 
case '4': printf("\n请输入要删除的数据："); 
scanf("\n%d",&Key); 
DelBSTNode(&T,Key); 
printf("删除*作完毕。\n");break; 
case '5': InorderBST(T); 
printf("\n二叉排序树输出完毕。\n");break; 
case '6':ch1='n';break; 
default:ch1='n'; 
} 
} 
} 

BSTree CreateBST(void) 
{
BSTree T; 
KeyType Key; 
T=NULL; 

printf("请输入关键字(输入0时结束输入)：\n");
while (true) 
{
scanf("\n%d",&Key);
if(!Key)break;
T=InsertBST(T,Key);
} 
return T; 
} 


void SearchBST(BSTree T, KeyType Key) 
{ 
BSTNode *p=T; 
while(p) 
{
	if(p->key==Key) 
	{
		printf("已找到\n"); 
		return; 
	} 
p=(Key<p->key) ? p->lchild:p->rchild; 
} 
	printf("没有找到\n"); 
} 


BSTree InsertBST(BSTree T,KeyType Key) //p1为指向指针的指针(故去指针的地址)
{
	BSTNode *f,*p; //p:保存查找需要插入的结点;f用来保存p的父节点
	p=T;		   //T:保存头结点，即每次查找需要插入的位置都从头结点开始
while(p) 
{
	if(p->key==Key) 
	{
		printf("树中已有Key不需插入\n"); 
		return T; 
	} 
	f=p; 
	p=(Key<p->key)?p->lchild:p->rchild; 
} 
//初始化p结点
p=(BSTNode*)malloc(sizeof(BSTNode)); //分配内存空间
p->key=Key; 
p->lchild=p->rchild=NULL; 

//建立p结点和父节点f的关系或者是它为头结点
if (T==NULL) //头结点
T=p; 
else if (Key<f->key) f->lchild=p; 
else f->rchild=p;

return T; 
}
 

void DelBSTNode(BSTree *T,KeyType Key) 
{
BSTNode *parent=NULL, *p, *q,*child; 
p=*T; 
while(p) 
{
	if(p->key==Key) 
		break; 
	parent=p; 
	p=(Key<p->key)?p->lchild:p->rchild; 
} 
if (!p) {
	printf("没有找到要删除的结点\n");return;
} 
q=p; 
if (q->lchild && q->rchild) 
for (parent=q,p=q->rchild; p->lchild; parent=p,p=p->lchild); 
child=(p->lchild)?p->lchild:p->rchild; 

if (!parent) 
*T=child; 
else {
	if (p==parent->lchild) 
	parent->lchild=child; 
	else parent->rchild=child; 
	if (p!=q) 
	q->key=p->key; 
} 
	free(p); 
} 


void InorderBST(BSTree T) 
{ 
if(T!=NULL) 
{
InorderBST(T->lchild); 
printf("%5d",T->key); 
InorderBST(T->rchild); 
} 
}